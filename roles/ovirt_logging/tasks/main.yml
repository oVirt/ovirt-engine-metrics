---
- name: Stop and disable fluentd service, if logging collector is Rsyslog
  service:
    name: fluentd
    state: stopped
    enabled: false
  ignore_errors: true

- name: Check if vdsm log file exist
  stat:
    path: /var/log/vdsm/vdsm.log
  register: vdsm_log_exists

- name: Check if engine log file exist
  stat:
    path: /var/log/ovirt-engine/engine.log
  register: engine_log_exists

- name: Set collect_ovirt_vdsm_log fact
  set_fact:
    collect_ovirt_vdsm_log: '{{ true if vdsm_log_exists.stat.exists else false }}'
  when: collect_ovirt_vdsm_log is undefined

- name: Set collect_ovirt_engine_log fact
  set_fact:
    collect_ovirt_engine_log: '{{ true if engine_log_exists.stat.exists else false }}'
  when: collect_ovirt_engine_log is undefined

- name: Check if listen.conf file exist
  stat:
    path: /etc/rsyslog.d/listen.conf
  register: listen_conf_exists

- name: Overwrite listen.conf content
  copy:
    content: '#$SystemLogSocketName /run/systemd/journal/syslog'
    dest: /etc/rsyslog.d/listen.conf
    mode: 0644
  when: listen_conf_exists.stat.exists

- name: Restart Rsyslog
  service:
    name: rsyslog
    state: restarted
  when: listen_conf_exists.stat.exists

- block:

    - name: Check Hosted Engine VM name
      command: engine-config -g HostedEngineVmName --cver=general
      register: hosted_engine_vm_name_result

    - name: Query Hosted Engine cluster name
      command: /usr/share/ovirt-engine/dbscripts/engine-psql.sh -t -c "select cluster_name from vms where vm_name='{{ hosted_engine_vm_name_result.stdout }}'"
      register: hosted_engine_vm_cluster_name_result
      ignore_errors: true

    - name: Set engine_cluster fact if engine is running on a VM
      set_fact:
        engine_cluster: "{{ hosted_engine_vm_cluster_name_result.stdout | trim }}"
      ignore_errors: true
      when: hosted_engine_vm_cluster_name_result.stdout | trim|length > 0

    - name: Set engine_cluster fact if engine is running as standalone
      set_fact:
        engine_cluster: "Standalone"
      ignore_errors: true
      when: hosted_engine_vm_cluster_name_result.stdout | trim|length == 0 or hosted_engine_vm_cluster_name_result.stdout is undefined

  when:
    - hostvars[inventory_hostname]["ovirt_vds_cluster_name"] is undefined
    - host_deploy_cluster_name is undefined

- name: Set logging facts
  set_fact:
    rsyslog_max_message_size: '{{ rsyslog_max_message_size|d("64k") }}'
    collect_ovirt_collectd_metrics: '{{ collect_ovirt_collectd_metrics|d(true) }}'
    ovirt_vds_cluster_name: '{{ hostvars[inventory_hostname]["ovirt_vds_cluster_name"]|d(host_deploy_cluster_name)|d(engine_cluster) }}'
    logging_purge_confs: '{{ logging_purge_confs|d(true) }}'

- block:
    - name: Set tls facts according to use_omelasticsearch_cert
      set_fact:
        rsyslog_elasticsearch_tls_metrics: false
        rsyslog_elasticsearch_tls_logs: false
      when:
        - not use_omelasticsearch_cert

    - name: Populate logging_outputs default files
      set_fact:
        logging_inputs: "{{ logging_inputs|d([]) + [basic_input] }}"
        logging_outputs: "{{ logging_outputs|d([]) + [default_files_output] }}"
        logging_flows: "{{ logging_flows|d([]) + [basic_flow] }}"
      when: (collect_ovirt_engine_log or collect_ovirt_vdsm_log) and collectd_default_files|d(true)
      vars:
        basic_input:
          name: basic_input
          type: basics
        default_files_output:
          name: default_files
          type: files
        basic_flow:
          name: basic_flow
          inputs: [basic_input]
          outputs: [default_files]

    - name: Populate logging_inputs and logging_flows for vdsm
      set_fact:
        logging_inputs: "{{ logging_inputs|d([]) + [vdsm_input] }}"
        logging_flows: "{{ logging_flows|d([]) + [vdsm_flow] }}"
      when: collect_ovirt_vdsm_log
      vars:
        vdsm_input:
          name: ovirt-log-input
          type: ovirt
          subtype: vdsm
        vdsm_flow:
          name: ovirt-logs-flow
          inputs: [ovirt-log-input]
          outputs: [elasticsearch_logs_output]

    - name: Populate logging_inputs and logging_flows engine log
      set_fact:
        logging_inputs: "{{ logging_inputs|d([]) + [engine_input] }}"
        logging_flows: "{{ logging_flows|d([]) + [engine_flow] }}"
      when: collect_ovirt_engine_log
      vars:
        engine_input:
          name: ovirt-log-input
          type: ovirt
          subtype: engine
        engine_flow:
          name: ovirt-logs-flow
          inputs: [ovirt-log-input]
          outputs: [elasticsearch_logs_output]

    - name: Populate logging_elasticsearch_password
      set_fact:
        logging_elasticsearch_password: "{{ logging_elasticsearch_password|d() }}"

    - name: Populate logging_outputs logs
      set_fact:
        logging_outputs: "{{ logging_outputs|d([]) + [elasticsearch_logs_output] }}"
      when: collect_ovirt_engine_log or collect_ovirt_vdsm_log
      vars:
        elasticsearch_logs_output:
          name: elasticsearch_logs_output
          type: elasticsearch
          input_type: ovirt
          server_host: '{{ elasticsearch_host }}'
          server_port: '{{ elasticsearch_port|d(9200) }}'
          template: '{{ rsyslog_elasticsearch_template_logs|d("es_template") }}'
          searchIndex: '{{ rsyslog_elasticsearch_searchIndex_logs|d("index_template") }}'
          dynSearchIndex: '{{ rsyslog_elasticsearch_dynSearchIndex_logs|d(true) | ternary("on", "off") }}'
          searchType: '{{ rsyslog_elasticsearch_searchType_logs|d("com.redhat.viaq.common") }}'
          index_prefix: '{{ rsyslog_elasticsearch_index_prefix_logs|d("project.ovirt-logs") }}'
          bulkmode: '{{ rsyslog_elasticsearch_bulkmode_logs|d("on") }}'
          writeoperation: '{{ rsyslog_elasticsearch_writeoperation_logs|d("create") }}'
          bulkid: '{{ rsyslog_elasticsearch_bulkid_logs|d("id_template") }}'
          dynbulkid: '{{ rsyslog_elasticsearch_dynbulkid_logs|d("on") }}'
          retryfailures: '{{ rsyslog_elasticsearch_retryfailures_logs|d("on") }}'
          retryruleset: '{{ rsyslog_elasticsearch_retryruleset_logs|d("try_es") }}'
          usehttps: '{{ rsyslog_elasticsearch_usehttps_logs|d("on") }}'
          allowUnsignedCerts: '{{ rsyslog_elasticsearch_allowunsignedcerts_logs|d("off") }}'
          tls: '{{ rsyslog_elasticsearch_tls_logs|d("true") }}'
          use_cert: '{{ rsyslog_elasticsearch_tls_logs|d("true") }}'
          ca_cert_src: '{{ rsyslog_elasticsearch_ca_cert_path|d() }}'
          cert_src: '{{ rsyslog_elasticsearch_client_cert_path|d() }}'
          private_key_src: '{{ rsyslog_elasticsearch_client_key_path|d() }}'
          uid: '{{ rsyslog_elasticsearch_uid|d("elastic") }}'

    - name: Populate logging_outputs metrics
      set_fact:
        logging_outputs: "{{ logging_outputs|d([]) + [elasticsearch_metrics_output] }}"
      when: collect_ovirt_collectd_metrics
      vars:
        elasticsearch_metrics_output:
          name: elasticsearch_metrics_output
          type: elasticsearch
          input_type: ovirt
          server_host: '{{ elasticsearch_host }}'
          server_port: '{{ elasticsearch_port|d(9200) }}'
          template: '{{ rsyslog_elasticsearch_template_metrics|d("es_template") }}'
          searchIndex: '{{ rsyslog_elasticsearch_searchIndex_metrics|d("index_template") }}'
          dynSearchIndex: '{{ rsyslog_elasticsearch_dynSearchIndex_metrics|d(true) | ternary("on", "off") }}'
          searchType: '{{ rsyslog_elasticsearch_searchType_metrics|d("com.redhat.viaq.common") }}'
          index_prefix: '{{ rsyslog_elasticsearch_index_prefix_metrics|d("project.ovirt-metrics") }}'
          bulkmode: '{{ rsyslog_elasticsearch_bulkmode_metrics|d("on") }}'
          writeoperation: '{{ rsyslog_elasticsearch_writeoperation_metrics|d("create") }}'
          bulkid: '{{ rsyslog_elasticsearch_bulkid_metrics|d("id_template") }}'
          dynbulkid: '{{ rsyslog_elasticsearch_dynbulkid_metrics|d("on") }}'
          retryfailures: '{{ rsyslog_elasticsearch_retryfailures_metrics|d("off") }}'
          retryruleset: '{{ rsyslog_elasticsearch_retryruleset_metrics|d("try_es") }}'
          usehttps: '{{ rsyslog_elasticsearch_usehttps_metrics|d("on") }}'
          allowUnsignedCerts: '{{ rsyslog_elasticsearch_allowunsignedcerts_metrics|d("off") }}'
          tls: '{{ rsyslog_elasticsearch_tls_metrics|d("true") }}'
          use_cert: '{{ rsyslog_elasticsearch_tls_metrics|d("true") }}'
          ca_cert_src: '{{ rsyslog_elasticsearch_ca_cert_path|d() }}'
          cert_src: '{{ rsyslog_elasticsearch_client_cert_path|d() }}'
          private_key_src: '{{ rsyslog_elasticsearch_client_key_path|d() }}'
          uid: '{{ rsyslog_elasticsearch_uid|d("elastic") }}'

    - name: Populate logging_inputs and logging_flows metrics
      set_fact:
        logging_inputs: "{{ logging_inputs|d([]) + [collectd_input] }}"
        logging_flows: "{{ logging_flows|d([]) + [collectd_flow] }}"
      when: collect_ovirt_collectd_metrics
      vars:
        collectd_input:
          name: ovirt-metrics-input
          type: ovirt
          subtype: collectd
        collectd_flow:
          name: ovirt-metrics-flow
          inputs: [ovirt-metrics-input]
          outputs: [elasticsearch_metrics_output]
  when: logging_output_type == 'elasticsearch'

- name: Run rsyslog sub-role
  include_role:
    name: linux-system-roles.logging
